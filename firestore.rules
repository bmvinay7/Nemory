rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUserId(userId) {
      return userId is string && userId.size() == 28 && userId.matches('^[a-zA-Z0-9]+$');
    }
    
    function isValidData() {
      return request.resource.data.keys().hasAll(['userId']) && 
             isValidUserId(request.resource.data.userId);
    }
    
    // Rate limiting helper (basic) - currently unused but available for future use
    // function isWithinRateLimit() {
    //   return request.time > resource.data.lastUpdated + duration.value(1, 's');
    // }

    // Allow authenticated users to read/write their own notion integration data
    match /notion_integrations/{userId} {
      allow read, write: if isOwner(userId) && isValidUserId(userId);
      allow create: if isAuthenticated() && isValidUserId(userId) && 
                       request.auth.uid == userId && isValidData();
    }
    
    // Allow authenticated users to read/write their own user profile data
    match /users/{userId} {
      allow read, write: if isOwner(userId) && isValidUserId(userId);
      allow create: if isAuthenticated() && isValidUserId(userId) && 
                       request.auth.uid == userId && isValidData();
    }
    
    // Allow authenticated users to read/write their own AI summaries
    match /summaries/{summaryId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId) &&
        isValidUserId(resource.data.userId);
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId &&
                       isValidUserId(request.resource.data.userId) &&
                       isValidData();
    }
    
    // Allow authenticated users to read/write their own preferences
    match /user_preferences/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to read/write their own metrics
    match /userMetrics/{userId} {
      allow read, write, create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to read/write their own Telegram preferences
    match /telegramPreferences/{userId} {
      allow read, write, create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to read/write their own summary preferences
    match /summaryPreferences/{userId} {
      allow read, write, create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to read/write their own deleted summaries
    match /deletedSummaries/{summaryId} {
      allow read, write, create: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }
    
    // Allow authenticated users to read/write their own schedules
    match /schedules/{scheduleId} {
      allow read, write, create: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
      // Allow server-side cron job to read all active schedules
      allow read: if true;
    }
    
    // Allow authenticated users to read/write their own schedule executions
    match /schedule_executions/{executionId} {
      allow read, write, create: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
      // Allow server-side cron job to create execution logs
      allow create: if true;
    }
    
    // Allow server-side cron job to read user data for schedule execution
    match /users/{userId} {
      allow read, write: if isOwner(userId) && isValidUserId(userId);
      allow create: if isAuthenticated() && isValidUserId(userId) && 
                       request.auth.uid == userId && isValidData();
      // Allow server-side cron job to read user tokens for schedule execution
      allow read: if true;
    }
    
    // Allow server-side cron job to read notion integrations for schedule execution
    match /notion_integrations/{userId} {
      allow read, write: if isOwner(userId) && isValidUserId(userId);
      allow create: if isAuthenticated() && isValidUserId(userId) && 
                       request.auth.uid == userId && isValidData();
      // Allow server-side cron job to read notion tokens for schedule execution
      allow read: if true;
    }
    
    // Deny all other access - only specific collections above are allowed
    match /{document=**} {
      allow read, write: if false;
    }
  }
}